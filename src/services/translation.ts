// Language detection and translation service
export interface Language {
  code: string;
  name: string;
  flag: string;
  speechCode: string;
}

export const SUPPORTED_LANGUAGES: Language[] = [
  { code: 'en', name: 'English', flag: 'üá∫üá∏', speechCode: 'en-US' },
  { code: 'hi', name: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥', speechCode: 'hi-IN' },
  { code: 'or', name: '‡¨ì‡¨°‡¨º‡¨ø‡¨Ü', flag: 'üáÆüá≥', speechCode: 'or-IN' },
  { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏', speechCode: 'es-ES' },
  { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑', speechCode: 'fr-FR' },
  { code: 'de', name: 'Deutsch', flag: 'üá©üá™', speechCode: 'de-DE' },
  { code: 'zh', name: '‰∏≠Êñá', flag: 'üá®üá≥', speechCode: 'zh-CN' },
  { code: 'ja', name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ', speechCode: 'ja-JP' },
  { code: 'ar', name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶', speechCode: 'ar-SA' },
  { code: 'pt', name: 'Portugu√™s', flag: 'üáßüá∑', speechCode: 'pt-BR' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫', speechCode: 'ru-RU' }
];

class TranslationService {
  private currentLanguage: Language = SUPPORTED_LANGUAGES[0]; // Default to English

  // Detect language from text (simple heuristic)
  detectLanguage(text: string): Language {
    const hindiPattern = /[\u0900-\u097F]/;
    const odiaPattern = /[\u0B00-\u0B7F]/;
    const chinesePattern = /[\u4e00-\u9fff]/;
    const arabicPattern = /[\u0600-\u06FF]/;
    const japanesePattern = /[\u3040-\u309F\u30A0-\u30FF]/;
    const russianPattern = /[\u0400-\u04FF]/;

    if (hindiPattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'hi')!;
    if (odiaPattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'or')!;
    if (chinesePattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'zh')!;
    if (arabicPattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'ar')!;
    if (japanesePattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'ja')!;
    if (russianPattern.test(text)) return SUPPORTED_LANGUAGES.find(l => l.code === 'ru')!;

    return SUPPORTED_LANGUAGES[0]; // Default to English
  }

  // Translate text using Google Translate API (free tier)
  async translateText(text: string, targetLang: string, sourceLang: string = 'auto'): Promise<string> {
    try {
      // Using a free translation API
      const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${sourceLang}|${targetLang}`);
      const data = await response.json();
      
      if (data.responseStatus === 200) {
        return data.responseData.translatedText;
      }
      
      // Fallback: return original text if translation fails
      return text;
    } catch (error) {
      console.error('Translation error:', error);
      return text;
    }
  }

  // Get health-related prompts in different languages
  getHealthPrompts(langCode: string): { [key: string]: string } {
    const prompts: { [lang: string]: { [key: string]: string } } = {
      en: {
        welcome: "Hello! I'm Surakshabot, your AI health assistant. How can I help you with your health concerns today?",
        askDetails: "To provide personalized care, please share: 'My name is [Your Name] and my phone number is [Your Phone Number]'",
        listening: "Listening... Speak now",
        speechSuccess: "Speech recognized successfully!",
        speechError: "Could not recognize speech. Please try again.",
        hospitals: "Nearby Hospitals",
        appointments: "Appointment Alerts", 
        vaccinations: "Vaccination Alerts"
      },
      hi: {
        welcome: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ‡§¨‡•â‡§ü ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
        askDetails: "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç: '‡§Æ‡•á‡§∞‡§æ ‡§®‡§æ‡§Æ [‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ] ‡§π‡•à ‡§î‡§∞ ‡§Æ‡•á‡§∞‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ [‡§Ü‡§™‡§ï‡§æ ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞] ‡§π‡•à'",
        listening: "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§Ö‡§¨ ‡§¨‡•ã‡§≤‡•á‡§Ç",
        speechSuccess: "‡§Ü‡§µ‡§æ‡§ú ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§™‡§π‡§ö‡§æ‡§®‡•Ä ‡§ó‡§à!",
        speechError: "‡§Ü‡§µ‡§æ‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡§ï‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
        hospitals: "‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤",
        appointments: "‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§Ö‡§≤‡§∞‡•ç‡§ü",
        vaccinations: "‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£ ‡§Ö‡§≤‡§∞‡•ç‡§ü"
      },
      es: {
        welcome: "¬°Hola! Soy Surakshabot, tu asistente de salud con IA. ¬øC√≥mo puedo ayudarte con tus preocupaciones de salud hoy?",
        askDetails: "Para brindar atenci√≥n personalizada, comparte: 'Mi nombre es [Tu Nombre] y mi n√∫mero de tel√©fono es [Tu N√∫mero de Tel√©fono]'",
        listening: "Escuchando... Habla ahora",
        speechSuccess: "¬°Voz reconocida exitosamente!",
        speechError: "No se pudo reconocer la voz. Int√©ntalo de nuevo.",
        hospitals: "Hospitales Cercanos",
        appointments: "Alertas de Citas",
        vaccinations: "Alertas de Vacunaci√≥n"
      }
    };

    return prompts[langCode] || prompts.en;
  }

  // Set current language
  setLanguage(language: Language): void {
    this.currentLanguage = language;
    localStorage.setItem('chatbot_language', JSON.stringify(language));
  }

  // Get current language
  getCurrentLanguage(): Language {
    const saved = localStorage.getItem('chatbot_language');
    if (saved) {
      try {
        return JSON.parse(saved);
      } catch (e) {
        return SUPPORTED_LANGUAGES[0];
      }
    }
    return this.currentLanguage;
  }

  // Get localized text
  getText(key: string): string {
    const prompts = this.getHealthPrompts(this.getCurrentLanguage().code);
    return prompts[key] || key;
  }
}

export const translationService = new TranslationService();